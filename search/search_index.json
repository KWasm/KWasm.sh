{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Kwasm is a Kubernetes Operator that adds WebAssembly support to your Kubernetes nodes. It does so by using a container image that contains binaries and configuration variables needed to run pure WebAssembly images.</p> <p>Warning</p> <p>This project is meant to be used for development or evaluation purpose. Your nodes may get damaged!</p> <p>The operator uses the kwasm-node-installer project to modify the underlying Kubernetes nodes.</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>Nigel Poulton describes in his blog article in detail what is needed to use containerd Wasm shims with Kubernetes.</p>"},{"location":"#supported-kubernetes-distributions","title":"Supported Kubernetes Distributions","text":""},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"<p>A Helm chart is available to easy install the operator</p> <pre><code># Add HELM repository if not already done\nhelm repo add kwasm http://kwasm.sh/kwasm-operator/\n# Install KWasm operator\nhelm install -n kwasm --create-namespace kwasm-operator kwasm/kwasm-operator\n# Provision Nodes\nkubectl annotate node --all kwasm.sh/kwasm-node=true\n</code></pre>"},{"location":"quickstart/#platform-based-configuration","title":"Platform based configuration","text":"<p>Depending on which platform you're experimenting with the Kwasm Operator certain configuration needs to be done to ensure proper functionality.</p> <p>The following configuration include the instruction to create a fresh cluster in case you haven't done that already.</p> KindMinikubeMicroK8sAzure AKSAWS EKSGCP GKEDO KubernetesCIVO <pre><code>kind create cluster\n</code></pre> <pre><code>minikube start --container-runtime='containerd'\n</code></pre> <pre><code>microk8s install\nmicrok8s status --wait-ready\n</code></pre> <pre><code>az group create --name kwasm --location eastus\naz aks create \\\n--resource-group kwasm \\\n--name kwasm \\\n--node-count 2 \\\n--generate-ssh-keys\n</code></pre> <p>Or follow the official Azure guide</p> <pre><code>eksctl create cluster --name kwasm --node-type=t3.medium --without-nodegroup --version=1.24\n\n# ATENTION, you need to choose the right region and ami\n# Look up the appropriate ami for your region: https://cloud-images.ubuntu.com/locator/ec2/\necho 'apiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: kwasm\n  region: us-west-2\nmanagedNodeGroups:\n  - name: ng-kwasm\n    ami: ami-0d429719359d44d16\n    instanceType: t3.medium\n    minSize: 1\n    maxSize: 2\n    overrideBootstrapCommand: |\n      #!/bin/bash\n      /etc/eks/bootstrap.sh kwasm --container-runtime containerd' | eksctl create nodegroup -f -\n# add cluster to kubeconfig\neksctl utils write-kubeconfig --cluster=kwasm  </code></pre> <pre><code>\n</code></pre> <pre><code>doctl kubernetes cluster create kwasm\n</code></pre> <pre><code>civo kubernetes create kwasm \ncivo kubernetes config kwasm --save\n</code></pre>"},{"location":"quickstart/#wasm-runtime-configuration","title":"WASM Runtime configuration","text":"<p>Depending on the wasm runtime you want to use the following configuration needs to be done.</p> WASMEDGESpin <p>The following definition can be applied to create a test wasm workload <pre><code>  apiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\nname: wasmedge\nhandler: wasmedge\n---\napiVersion: batch/v1\nkind: Job\nmetadata:\ncreationTimestamp: null\nname: wasm-test\nspec:\ntemplate:\nmetadata:\nannotations:\nmodule.wasm.image/variant: compat-smart\ncreationTimestamp: null\nspec:\ncontainers:\n- image: wasmedge/example-wasi:latest\nname: wasm-test\nresources: {}\nrestartPolicy: Never\nruntimeClassName: wasmedge\nbackoffLimit: 1\n</code></pre></p> <p>or apply the file from source <pre><code>kubectl apply -f https://raw.githubusercontent.com/KWasm/kwasm-node-installer/main/example/test-job.yaml\nkubectl logs job/wasm-test\n</code></pre></p> <p>After installing KWasm, start with step 3 of containerd-wasm-shims using-a-shim-in-kubernetes</p> <pre><code>echo '\n  apiVersion: node.k8s.io/v1                                           \n  kind: RuntimeClass\n  metadata:\n    name: wasmtime-spin\n  handler: spin' | kubectl apply -f -\n\necho '\n  apiVersion: apps/v1                                                  \n  kind: Deployment\n  metadata:\n    name: wasm-spin\n  spec:\n    replicas: 1\n    selector:\n      matchLabels:\n        app: wasm-spin\n    template:\n      metadata:\n        labels:\n          app: wasm-spin\n      spec:\n        runtimeClassName: wasmtime-spin\n        containers:\n        - name: spin-hello\n          image: ghcr.io/deislabs/containerd-wasm-shims/examples/spin-rust-hello:latest\n          command: [\"/\"]\n' | kubectl apply -f -\n\n# Finally test the hello spin app \ud83e\udd73\nkubectl port-forward deployment/wasm-spin 8000:80\ncurl localhost:8000/hello\n</code></pre>"}]}